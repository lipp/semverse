{
    "swagger": "2.0",
    "info": {
        "description": "SemVerse public API. Create your own SemVerse !",
        "version": "1.0.0",
        "title": "SemVerse Public API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "url": "http://github.com/StephaneTrebel/semverse.git",
            "name": "SemVerse creator",
            "email": "contact@semverse.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost",
    "basePath": "/api",
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "tags": [{
        "name": "user",
        "description": "User management"
    }, {
        "name": "entity",
        "description": "Entities control",
        "externalDocs": {
            "description": "Find out more",
            "url": "http://semverse.com"
        }
    }],
    "paths": {
        "/entity": {
            "x-swagger-router-controller": "entities",
            "get": {
                "tags": [
                    "entity"
                ],
                "summary": "List all entities",
                "description": "This action will list all entities",
                "operationId": "listEntities",
                "responses": {
                    "200": {
                        "description": "Entity list",
                        "schema": {
                            "$ref": "#/definitions/EntityList"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [{}]
            },
            "post": {
                "tags": [
                    "entity"
                ],
                "summary": "Spawn a new entity",
                "description": "This action will create a new entity. It may be related to other entities, though",
                "operationId": "createEntity",
                "parameters": [{
                    "in": "body",
                    "name": "entity",
                    "description": "The new entity",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Entity"
                    }
                }],
                "responses": {
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [{}]
            }
        },
        "/entity/{entityId}": {
            "get": {
                "tags": [
                    "entity"
                ],
                "summary": "Find entity by ID",
                "description": "Returns a entity from its ID",
                "operationId": "getEntityById",
                "parameters": [{
                    "in": "path",
                    "name": "entityId",
                    "description": "ID of entity that needs to be fetched",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "404": {
                        "description": "Entity not found"
                    },
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Entity"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [{
                    "api_key": []
                }, {}]
            },
            "delete": {
                "tags": [
                    "entity"
                ],
                "summary": "Deletes a entity",
                "description": "Will delete an entity. Beware ! NO UNDO POSSIBLE ! Use an entity status if you're not sure about what you're doing",
                "operationId": "deleteEntity",
                "parameters": [{
                    "in": "header",
                    "name": "api_key",
                    "description": "API Key for authentication",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "path",
                    "name": "entityId",
                    "description": "Entity id to delete",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "400": {
                        "description": "Invalid entity value",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [{}]
            },
            "put": {
                "tags": [
                    "entity"
                ],
                "summary": "Update an existing entity",
                "description": "",
                "operationId": "updateEntity",
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "Entity object that needs to be updated",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/Entity"
                    }
                }, {
                    "in": "path",
                    "name": "entityId",
                    "description": "Entity id to delete",
                    "required": true,
                    "type": "integer",
                    "format": "int64"
                }],
                "responses": {
                    "404": {
                        "description": "Entity not found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                },
                "security": [{}]
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create a user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "parameters": [{
                    "in": "body",
                    "name": "body",
                    "description": "User object",
                    "required": true,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "parameters": [{
                    "in": "query",
                    "name": "username",
                    "description": "The user name for login",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "query",
                    "name": "password",
                    "description": "The password for login in clear text",
                    "required": true,
                    "type": "string",
                    "format": "password"
                }],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "Will remove internal session token for this user",
                "operationId": "logoutUser",
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "parameters": [{
                    "in": "path",
                    "name": "username",
                    "description": "The name that needs to be fetched",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "parameters": [{
                    "in": "path",
                    "name": "username",
                    "description": "name that need to be deleted",
                    "required": true,
                    "type": "string"
                }, {
                    "in": "body",
                    "name": "body",
                    "description": "Updated user object",
                    "required": false,
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "parameters": [{
                    "in": "path",
                    "name": "username",
                    "description": "The name that needs to be deleted",
                    "required": true,
                    "type": "string"
                }],
                "responses": {
                    "404": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
        }
    },
    "definitions": {
        "Error": {
            "required": [
                "code",
                "description",
                "errors"
            ],
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int64"
                },
                "description": {
                    "type": "string"
                },
                "errors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "User": {
            "required": [
                "id",
                "username",
                "email"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            }
        },
        "Entity": {
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                }
            }
        },
        "EntityList": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Entity"
            }
        }
    }
}
